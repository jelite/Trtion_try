; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @add_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr #0 !dbg !5 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !8
  %7 = shl i32 %6, 10, !dbg !9
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = shl i32 %8, 2, !dbg !10
  %10 = and i32 %9, 508, !dbg !10
  %11 = or disjoint i32 %10, %7, !dbg !11
  %12 = or disjoint i32 %11, 512, !dbg !11
  %13 = icmp slt i32 %11, %3, !dbg !12
  %14 = icmp slt i32 %12, %3, !dbg !12
  %15 = sext i32 %11 to i64, !dbg !13
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !13
  %17 = sext i32 %12 to i64, !dbg !13
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %13) #2, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %24 = bitcast i32 %20 to float, !dbg !14
  %25 = bitcast i32 %21 to float, !dbg !14
  %26 = bitcast i32 %22 to float, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #2, !dbg !14
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !14
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !14
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !14
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !14
  %33 = bitcast i32 %29 to float, !dbg !14
  %34 = bitcast i32 %30 to float, !dbg !14
  %35 = bitcast i32 %31 to float, !dbg !14
  %36 = bitcast i32 %32 to float, !dbg !14
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %13) #2, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = bitcast i32 %40 to float, !dbg !16
  %45 = bitcast i32 %41 to float, !dbg !16
  %46 = bitcast i32 %42 to float, !dbg !16
  %47 = bitcast i32 %43 to float, !dbg !16
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %14) #2, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = bitcast i32 %49 to float, !dbg !16
  %54 = bitcast i32 %50 to float, !dbg !16
  %55 = bitcast i32 %51 to float, !dbg !16
  %56 = bitcast i32 %52 to float, !dbg !16
  %57 = fadd float %24, %44, !dbg !17
  %58 = fadd float %25, %45, !dbg !17
  %59 = fadd float %26, %46, !dbg !17
  %60 = fadd float %27, %47, !dbg !17
  %61 = fadd float %33, %53, !dbg !17
  %62 = fadd float %34, %54, !dbg !17
  %63 = fadd float %35, %55, !dbg !17
  %64 = fadd float %36, %56, !dbg !17
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !18
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !18
  %67 = bitcast float %57 to i32, !dbg !19
  %68 = bitcast float %58 to i32, !dbg !19
  %69 = bitcast float %59 to i32, !dbg !19
  %70 = bitcast float %60 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %67, i32 %68, i32 %69, i32 %70, ptr addrspace(1) %65, i1 %13) #2, !dbg !19
  %71 = bitcast float %61 to i32, !dbg !19
  %72 = bitcast float %62 to i32, !dbg !19
  %73 = bitcast float %63 to i32, !dbg !19
  %74 = bitcast float %64 to i32, !dbg !19
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %71, i32 %72, i32 %73, i32 %74, ptr addrspace(1) %66, i1 %14) #2, !dbg !19
  ret void, !dbg !20
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

attributes #0 = { "nvvm.reqntid"="128" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}
!llvm.ident = !{!4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "vectorAdd.py", directory: "/workspace/Trtion_try")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!4 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!5 = distinct !DISubprogram(name: "add_kernel", linkageName: "add_kernel", scope: !1, file: !1, line: 13, type: !6, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!6 = !DISubroutineType(cc: DW_CC_normal, types: !7)
!7 = !{}
!8 = !DILocation(line: 20, column: 24, scope: !5)
!9 = !DILocation(line: 22, column: 24, scope: !5)
!10 = !DILocation(line: 23, column: 41, scope: !5)
!11 = !DILocation(line: 23, column: 28, scope: !5)
!12 = !DILocation(line: 25, column: 21, scope: !5)
!13 = !DILocation(line: 27, column: 24, scope: !5)
!14 = !DILocation(line: 27, column: 16, scope: !5)
!15 = !DILocation(line: 28, column: 24, scope: !5)
!16 = !DILocation(line: 28, column: 16, scope: !5)
!17 = !DILocation(line: 29, column: 17, scope: !5)
!18 = !DILocation(line: 31, column: 26, scope: !5)
!19 = !DILocation(line: 31, column: 35, scope: !5)
!20 = !DILocation(line: 31, column: 4, scope: !5)
